# A group of utility functions for supporting anomaly detection
import Distributions: Uniform

# Utility function to generate synthesized data
# normal data is generated by a multivariate Gaussian distribution and
# outliers are generated by a uniform distribution.
function generate_data(n_data::Int64=1000, n_features::Int64=2,
    contamination::Float64=0.1, offset::Int64=10, random_state::Int64=42)
    # use pre-defined seeds
    srand(random_state)
    coef_ = rand(Float64) + 0.001
    offset_ = rand(1:100)

    n_outliers = Int(n_data * contamination)
    n_inliers = Int(n_data - n_outliers)

    inliers = coef_ * randn((n_inliers, n_features)) + offset_
    outliers = rand(Uniform(-1 * offset_, offset_), n_outliers, n_features)

    X = vcat(inliers, outliers)
    y = convert(Array{Int64, 1}, vcat(zeros(n_inliers), ones(n_outliers)))
    transpose(X), y
end

# print(generate_data())
X, y = generate_data(100, 3)


#%%
using NearestNeighbors

# Create a KD tree for this purpose
kdtree = KDTree(X; leafsize = 15)
k = 10
idxs, dists = knn(kdtree, X, k, true)

for i = 1:100
    println(i, " ", mean(dists[i]))
end
